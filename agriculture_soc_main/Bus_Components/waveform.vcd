$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module adc_apb_fifo_wrapper_tb $end
  $var wire 32 n ADDR_WIDTH [31:0] $end
  $var wire 32 o DATA_WIDTH [31:0] $end
  $var wire 1 b PCLK $end
  $var wire 1 # PRESETn $end
  $var wire 1 $ PSEL $end
  $var wire 12 % PADDR [11:0] $end
  $var wire 1 & PENABLE $end
  $var wire 1 ' PWRITE $end
  $var wire 32 ( PWDATA [31:0] $end
  $var wire 32 * PRDATA [31:0] $end
  $var wire 1 c PREADY $end
  $var wire 1 p PSLVERR $end
  $scope module uut $end
   $var wire 32 n ADDR_WIDTH [31:0] $end
   $var wire 32 o DATA_WIDTH [31:0] $end
   $var wire 1 b PCLK $end
   $var wire 1 # PRESETn $end
   $var wire 1 $ PSEL $end
   $var wire 12 % PADDR [11:0] $end
   $var wire 1 & PENABLE $end
   $var wire 1 ' PWRITE $end
   $var wire 32 ( PWDATA [31:0] $end
   $var wire 32 * PRDATA [31:0] $end
   $var wire 1 c PREADY $end
   $var wire 1 p PSLVERR $end
   $var wire 32 \ pll_reg [31:0] $end
   $var wire 32 ] amux_reg [31:0] $end
   $var wire 32 ^ trig_reg [31:0] $end
   $var wire 32 + status_reg [31:0] $end
   $var wire 1 , adc_trig $end
   $var wire 1 - fifo_full $end
   $var wire 1 . fifo_empty $end
   $var wire 56 / fifo_data_out [55:0] $end
   $var wire 1 1 fifo_rd_en $end
   $var wire 1 2 fifo_rd_en_d $end
   $var wire 56 3 adc_data_generated [55:0] $end
   $var wire 1 5 adc_data_valid_out $end
   $var wire 12 q STATUS_REG_ADDR [11:0] $end
   $var wire 12 r MEASUREMENT_HI_ADDR [11:0] $end
   $var wire 12 s MEASUREMENT_LO_ADDR [11:0] $end
   $var wire 12 t PLL_CONTROL_ADDR [11:0] $end
   $var wire 12 u AMUX_ADDR [11:0] $end
   $var wire 12 v ADC_TRIGGER_ADDR [11:0] $end
   $var wire 1 d read_enable $end
   $var wire 1 e write_enable $end
   $var wire 1 w analog_passthrough $end
   $scope module adc_inst $end
    $var wire 32 x DATA_WIDTH [31:0] $end
    $var wire 32 y RAND_SEED [31:0] $end
    $var wire 56 6 STATUS_REG_ADDR [55:0] $end
    $var wire 56 3 MEASUREMENT [55:0] $end
    $var wire 56 _ ADC_TRIGGER [55:0] $end
    $var wire 1 w ANALOG_IN $end
    $var wire 1 b clk $end
    $var wire 1 ) reset $end
    $var wire 1 5 DATA_VALID_OUT $end
    $var wire 56 f ADC_TRIGGER_PREV [55:0] $end
    $var wire 56 h STATUS_REG_ADDR_PREV [55:0] $end
    $var wire 56 j MEASUREMENT_PREV [55:0] $end
    $var wire 1 l ANALOG_IN_PREV $end
    $var wire 32 m seed [31:0] $end
   $upscope $end
   $scope module amux_inst $end
    $var wire 32 z AMUX_INPUTS [31:0] $end
    $var wire 2 a INPUT_SEL [1:0] $end
    $var wire 1 w ANALOG_PASSTHROUGH $end
   $upscope $end
   $scope module fifo $end
    $var wire 32 x DATA_WIDTH [31:0] $end
    $var wire 32 { DEPTH [31:0] $end
    $var wire 1 b clk $end
    $var wire 1 # rst_n $end
    $var wire 1 8 adc_wr_en $end
    $var wire 56 3 adc_data [55:0] $end
    $var wire 1 - fifo_full $end
    $var wire 1 1 apb_rd_en $end
    $var wire 56 / apb_rd_data [55:0] $end
    $var wire 1 . fifo_empty $end
    $var wire 1 , fifo_clear $end
    $var wire 56 9 fifo_mem[0] [55:0] $end
    $var wire 56 ; fifo_mem[1] [55:0] $end
    $var wire 56 = fifo_mem[2] [55:0] $end
    $var wire 56 ? fifo_mem[3] [55:0] $end
    $var wire 56 A fifo_mem[4] [55:0] $end
    $var wire 56 C fifo_mem[5] [55:0] $end
    $var wire 56 E fifo_mem[6] [55:0] $end
    $var wire 56 G fifo_mem[7] [55:0] $end
    $var wire 56 I fifo_mem[8] [55:0] $end
    $var wire 56 K fifo_mem[9] [55:0] $end
    $var wire 56 M fifo_mem[10] [55:0] $end
    $var wire 56 O fifo_mem[11] [55:0] $end
    $var wire 56 Q fifo_mem[12] [55:0] $end
    $var wire 56 S fifo_mem[13] [55:0] $end
    $var wire 56 U fifo_mem[14] [55:0] $end
    $var wire 56 W fifo_mem[15] [55:0] $end
    $var wire 4 Y wr_ptr [3:0] $end
    $var wire 4 Z rd_ptr [3:0] $end
    $var wire 5 [ count [4:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b000000000000 %
0&
0'
b00000000000000000000000000000000 (
1)
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
0,
0-
1.
b00000000000000000000000000000000000000000000000000000000 /
01
02
b00000000000000000000000000000000000000000000000000000000 3
05
b00000000000000000000000000000000000000000000000000000000 6
08
b00000000000000000000000000000000000000000000000000000000 9
b00000000000000000000000000000000000000000000000000000000 ;
b00000000000000000000000000000000000000000000000000000000 =
b00000000000000000000000000000000000000000000000000000000 ?
b00000000000000000000000000000000000000000000000000000000 A
b00000000000000000000000000000000000000000000000000000000 C
b00000000000000000000000000000000000000000000000000000000 E
b00000000000000000000000000000000000000000000000000000000 G
b00000000000000000000000000000000000000000000000000000000 I
b00000000000000000000000000000000000000000000000000000000 K
b00000000000000000000000000000000000000000000000000000000 M
b00000000000000000000000000000000000000000000000000000000 O
b00000000000000000000000000000000000000000000000000000000 Q
b00000000000000000000000000000000000000000000000000000000 S
b00000000000000000000000000000000000000000000000000000000 U
b00000000000000000000000000000000000000000000000000000000 W
b0000 Y
b0000 Z
b00000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000000000000000000000000000 _
b00 a
0b
0c
0d
0e
b00000000000000000000000000000000000000000000000000000000 f
b00000000000000000000000000000000000000000000000000000000 h
b00000000000000000000000000000000000000000000000000000000 j
0l
b00000000000000000000000000000001 m
b00000000000000000000000000001100 n
b00000000000000000000000000100000 o
0p
b000000000001 q
b000000000010 r
b000000000011 s
b000100000000 t
b000100000001 u
b000100000010 v
0w
b00000000000000000000000000111000 x
b00000000000000000000000000000001 y
b00000000000000000000000000000100 z
b00000000000000000000000000010000 {
#5000
1b
1c
#10000
0b
#15000
1b
#20000
1#
0)
0b
#25000
1$
b000000000001 %
1&
1b
1d
#30000
0b
#35000
0$
0&
1b
0d
#40000
0b
#45000
1$
b000100000010 %
1&
1'
b00000000000000000000000000000001 (
1,
b00000000000000000000000000000001 ^
b00000000000000000000000000000000000000000000000000000001 _
1b
1e
#50000
0b
#55000
0$
0&
0,
b00000000000000000000000011111111111111111111111111111100 3
15
18
1b
0e
b00000000000000000000000000000000000000000000000000000001 f
#60000
0b
#65000
b00000000000000000000000000000100 +
0.
b00000000000000000000000011111111111111111111111111111100 /
05
b00000000000000000000000000000000000000000000000000000100 6
08
b00000000000000000000000011111111111111111111111111111100 9
b0001 Y
b00001 [
1b
b00000000000000000000000011111111111111111111111111111100 j
#70000
0b
#75000
1$
b000000000001 %
1&
0'
b00000000000000000000000000000100 *
b00000000000000000000000000000001 +
b00000000000000000000000000000000000000000000000000000001 6
1b
1d
b00000000000000000000000000000000000000000000000000000100 h
#80000
0b
#85000
0$
0&
b00000000000000000000000000000000 *
1b
0d
b00000000000000000000000000000000000000000000000000000001 h
#90000
0b
#95000
1$
b000000000010 %
1&
b00000000000000000000000011111111 *
1b
1d
#100000
0b
#105000
0$
0&
b00000000000000000000000000000000 *
1b
0d
#110000
0b
#115000
1$
b000000000011 %
1&
b00000000111111111111111111111100 *
11
1b
1d
#120000
0b
#125000
0$
0&
b00000000000000000000000000000000 *
1.
b00000000000000000000000000000000000000000000000000000000 /
01
12
b0001 Z
b00000 [
1b
0d
#130000
0b
#135000
b00000000000000000000000000000000 +
02
b00000000000000000000000000000000000000000000000000000000 6
1b
#140000
0b
#145000
1$
b000000000001 %
1&
1b
1d
b00000000000000000000000000000000000000000000000000000000 h
#150000
0b
#155000
0$
0&
1b
0d
#160000
0b
#165000
1b
#170000
0b
#175000
1b
#180000
0b
#185000
1b
#190000
0b
#195000
1b
#200000
0b
#205000
1b
