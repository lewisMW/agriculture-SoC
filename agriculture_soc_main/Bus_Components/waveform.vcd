$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module adc_apb_wrapper_tb $end
  $var wire 32 b ADDR_WIDTH [31:0] $end
  $var wire 32 c DATA_WIDTH [31:0] $end
  $var wire 1 ] PCLK $end
  $var wire 1 # PRESETn $end
  $var wire 1 $ PSEL $end
  $var wire 12 % PADDR [11:0] $end
  $var wire 1 & PENABLE $end
  $var wire 1 ' PWRITE $end
  $var wire 32 ( PWDATA [31:0] $end
  $var wire 32 , PRDATA [31:0] $end
  $var wire 1 ^ PREADY $end
  $var wire 1 d PSLVERR $end
  $var wire 56 ) adc_data [55:0] $end
  $var wire 1 + adc_data_valid $end
  $scope module uut $end
   $var wire 32 b ADDR_WIDTH [31:0] $end
   $var wire 32 c DATA_WIDTH [31:0] $end
   $var wire 1 ] PCLK $end
   $var wire 1 # PRESETn $end
   $var wire 1 $ PSEL $end
   $var wire 12 % PADDR [11:0] $end
   $var wire 1 & PENABLE $end
   $var wire 1 ' PWRITE $end
   $var wire 32 ( PWDATA [31:0] $end
   $var wire 32 , PRDATA [31:0] $end
   $var wire 1 ^ PREADY $end
   $var wire 1 d PSLVERR $end
   $var wire 56 ) adc_data [55:0] $end
   $var wire 1 + adc_data_valid $end
   $var wire 32 - pll_reg [31:0] $end
   $var wire 32 . amux_reg [31:0] $end
   $var wire 32 / trig_reg [31:0] $end
   $var wire 32 0 status_reg [31:0] $end
   $var wire 1 1 adc_trig $end
   $var wire 1 2 fifo_full $end
   $var wire 1 3 fifo_empty $end
   $var wire 56 4 fifo_data_out [55:0] $end
   $var wire 1 6 fifo_rd_en $end
   $var wire 1 7 fifo_rd_en_d $end
   $var wire 12 e STATUS_REG_ADDR [11:0] $end
   $var wire 12 f MEASUREMENT_HI_ADDR [11:0] $end
   $var wire 12 g MEASUREMENT_LO_ADDR [11:0] $end
   $var wire 12 h PLL_CONTROL_ADDR [11:0] $end
   $var wire 12 i AMUX_ADDR [11:0] $end
   $var wire 12 j ADC_TRIGGER_ADDR [11:0] $end
   $var wire 1 _ read_enable $end
   $var wire 1 ` write_enable $end
   $var wire 1 k analog_passthrough $end
   $scope module adc_inst $end
    $var wire 32 c DATA_WIDTH [31:0] $end
    $var wire 32 0 STATUS_REG_ADDR [31:0] $end
    $var wire 32 8 MEASUREMENT [31:0] $end
    $var wire 32 - PLL_CONTROL [31:0] $end
    $var wire 32 / ADC_TRIGGER [31:0] $end
    $var wire 1 k ANALOG_IN $end
   $upscope $end
   $scope module amux_inst $end
    $var wire 32 l AMUX_INPUTS [31:0] $end
    $var wire 2 9 INPUT_SEL [1:0] $end
    $var wire 1 k ANALOG_PASSTHROUGH $end
   $upscope $end
   $scope module fifo $end
    $var wire 32 m DATA_WIDTH [31:0] $end
    $var wire 32 n DEPTH [31:0] $end
    $var wire 1 ] clk $end
    $var wire 1 # rst_n $end
    $var wire 1 a adc_wr_en $end
    $var wire 56 ) adc_data [55:0] $end
    $var wire 1 2 fifo_full $end
    $var wire 1 6 apb_rd_en $end
    $var wire 56 4 apb_rd_data [55:0] $end
    $var wire 1 3 fifo_empty $end
    $var wire 1 1 fifo_clear $end
    $var wire 56 : fifo_mem[0] [55:0] $end
    $var wire 56 < fifo_mem[1] [55:0] $end
    $var wire 56 > fifo_mem[2] [55:0] $end
    $var wire 56 @ fifo_mem[3] [55:0] $end
    $var wire 56 B fifo_mem[4] [55:0] $end
    $var wire 56 D fifo_mem[5] [55:0] $end
    $var wire 56 F fifo_mem[6] [55:0] $end
    $var wire 56 H fifo_mem[7] [55:0] $end
    $var wire 56 J fifo_mem[8] [55:0] $end
    $var wire 56 L fifo_mem[9] [55:0] $end
    $var wire 56 N fifo_mem[10] [55:0] $end
    $var wire 56 P fifo_mem[11] [55:0] $end
    $var wire 56 R fifo_mem[12] [55:0] $end
    $var wire 56 T fifo_mem[13] [55:0] $end
    $var wire 56 V fifo_mem[14] [55:0] $end
    $var wire 56 X fifo_mem[15] [55:0] $end
    $var wire 4 Z wr_ptr [3:0] $end
    $var wire 4 [ rd_ptr [3:0] $end
    $var wire 5 \ count [4:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b000000000000 %
0&
0'
b00000000000000000000000000000000 (
b00000000000000000000000000000000000000000000000000000000 )
0+
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
01
02
13
b00000000000000000000000000000000000000000000000000000000 4
06
07
b00000000000000000000000000000000 8
b00 9
b00000000000000000000000000000000000000000000000000000000 :
b00000000000000000000000000000000000000000000000000000000 <
b00000000000000000000000000000000000000000000000000000000 >
b00000000000000000000000000000000000000000000000000000000 @
b00000000000000000000000000000000000000000000000000000000 B
b00000000000000000000000000000000000000000000000000000000 D
b00000000000000000000000000000000000000000000000000000000 F
b00000000000000000000000000000000000000000000000000000000 H
b00000000000000000000000000000000000000000000000000000000 J
b00000000000000000000000000000000000000000000000000000000 L
b00000000000000000000000000000000000000000000000000000000 N
b00000000000000000000000000000000000000000000000000000000 P
b00000000000000000000000000000000000000000000000000000000 R
b00000000000000000000000000000000000000000000000000000000 T
b00000000000000000000000000000000000000000000000000000000 V
b00000000000000000000000000000000000000000000000000000000 X
b0000 Z
b0000 [
b00000 \
0]
0^
0_
0`
0a
b00000000000000000000000000001100 b
b00000000000000000000000000100000 c
0d
b000000000001 e
b000000000010 f
b000000000011 g
b000100000000 h
b000100000001 i
b000100000010 j
0k
b00000000000000000000000000000100 l
b00000000000000000000000000111000 m
b00000000000000000000000000010000 n
#5000
1]
1^
#10000
0]
#15000
1]
#20000
1#
0]
#25000
1$
b000000000001 %
1&
1]
1_
#30000
0]
#35000
0$
0&
1]
0_
#40000
0]
#45000
b00010010001101000101011001111000100110101011110011011110 )
1+
b00000000000000000000000000000100 0
03
b00010010001101000101011001111000100110101011110011011110 4
b00010010001101000101011001111000 8
b00010010001101000101011001111000100110101011110011011110 :
b0001 Z
b00001 \
1]
1a
#50000
0]
#55000
0+
b00000000000000000000000000000001 0
1]
0a
#60000
0]
#65000
1]
#70000
0]
#75000
1$
1&
b00000000000000000000000000000001 ,
1]
1_
#80000
0]
#85000
0$
0&
b00000000000000000000000000000000 ,
1]
0_
#90000
0]
#95000
1$
b000000000010 %
1&
b00010010001101000101011001111000 ,
1]
1_
#100000
0]
#105000
0$
0&
b00000000000000000000000000000000 ,
1]
0_
#110000
0]
#115000
1$
b000000000011 %
1&
b00000000100110101011110011011110 ,
16
1]
1_
#120000
0]
#125000
0$
0&
b00000000000000000000000000000000 ,
13
b00000000000000000000000000000000000000000000000000000000 4
06
17
b00000000000000000000000000000000 8
b0001 [
b00000 \
1]
0_
#130000
0]
#135000
b00000000000000000000000000000000 0
07
1]
#140000
0]
#145000
1$
b000000000001 %
1&
1]
1_
#150000
0]
#155000
0$
0&
1]
0_
#160000
0]
#165000
1]
#170000
0]
#175000
1]
#180000
0]
#185000
1]
#190000
0]
#195000
1]
#200000
0]
#205000
1]
